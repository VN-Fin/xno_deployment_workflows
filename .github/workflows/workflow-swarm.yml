name: Build and Deploy to Swarm

on:
  workflow_call:
    inputs:
      environment:
        description: "Deployment environment (e.g., dev, staging, prod)"
        required: true
        type: string
      services:
        description: "Comma-separated list of service directories or 'root' for single service"
        required: true
        type: string
      dockerfiles:
        description: "Optional comma-separated list of Dockerfile paths (must align with services)"
        required: false
        type: string
    secrets:
      GHCR_TOKEN:
        required: true
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(inputs.services == 'root' && '["root"]' || format('["{0}"]', join(inputs.services, '","'))) }}
    outputs:
      image_names: ${{ steps.set_output.outputs.image_names }}
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set metadata and build image
        id: build
        run: |
          ENV=${{ inputs.environment }}
          SERVICE=${{ matrix.service }}
          IMAGE_TAG=${GITHUB_SHA::8}

          if [ "$SERVICE" = "root" ]; then
            CONTEXT="."
            DOCKERFILE="${{ inputs.dockerfiles || 'Dockerfile' }}"
            IMAGE_NAME="ghcr.io/${{ github.repository }}/${ENV}-app:${IMAGE_TAG}"
          else
            CONTEXT="$SERVICE"
            DOCKERFILE="${{ inputs.dockerfiles || format('{0}/Dockerfile', matrix.service) }}"
            IMAGE_NAME="ghcr.io/${{ github.repository }}/${ENV}-${SERVICE}:${IMAGE_TAG}"
          fi

          echo "Building image: $IMAGE_NAME"
          echo "context=$CONTEXT"
          echo "dockerfile=$DOCKERFILE"

          docker buildx build \
            --push \
            --file "$DOCKERFILE" \
            --tag "$IMAGE_NAME" \
            --tag "ghcr.io/${{ github.repository }}/${ENV}-${SERVICE}:latest" \
            "$CONTEXT"

          echo "$SERVICE=$IMAGE_NAME" >> image_map.txt

      - name: Set combined image outputs
        id: set_output
        run: |
          echo "image_names<<EOF" >> $GITHUB_OUTPUT
          cat image_map.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  deploy_local:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Deploy stack with resolved image tags
        run: |
          echo "${{ needs.build.outputs.image_names }}" > images.txt
          cat images.txt

          # Replace in compose
          envsubst < docker-compose.yaml > docker-compose.resolved.yaml

          docker stack deploy \
            -c docker-compose.resolved.yaml \
            ${{ inputs.environment }} \
            --with-registry-auth \
            --resolve-image never
