name: Build and Deploy to Swarm

on:
  workflow_call:
    inputs:
      environment:
        description: "Deployment environment (e.g., dev, staging, prod)"
        required: true
        type: string
      service_name:
        description: "Service directory (e.g., user-service)"
        required: true
        type: string
      dockerfile:
        description: "Path to Dockerfile (optional, default: <service_name>/Dockerfile)"
        required: false
        type: string
      context:
        description: "Build context (optional, default: <service_name>)"
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.meta.outputs.image_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set metadata
        id: meta
        run: |
          SERVICE=${{ inputs.service_name }}
          ENV=${{ inputs.environment }}
          IMAGE_TAG=${GITHUB_SHA::8}
          IMAGE_NAME="ghcr.io/${{ github.repository }}/${ENV}-${SERVICE}:${IMAGE_TAG}"
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push to GHCR
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ inputs.context || inputs.service_name }}
          file: ${{ inputs.dockerfile || format('{0}/Dockerfile', inputs.service_name) }}
          tags: |
            ${{ steps.meta.outputs.image_name }}
            ghcr.io/${{ github.repository }}/${{ inputs.environment }}-${{ inputs.service_name }}:latest

  deploy_local:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Deploy stack with resolved image tag
        run: |
          SERVICE_NAME=${{ inputs.service_name }}
          IMAGE_NAME=${{ needs.build.outputs.image_name }}
          echo "Deploying $SERVICE_NAME with $IMAGE_NAME"

          # Replace IMAGE_NAME dynamically
          env IMAGE_NAME=$IMAGE_NAME envsubst < docker-compose.yaml > docker-compose.resolved.yaml

          docker stack deploy \
            -c docker-compose.resolved.yaml \
            $SERVICE_NAME --with-registry-auth --resolve-image never
